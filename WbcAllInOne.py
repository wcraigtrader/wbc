from datetime import timedelta
import logging

from WbcMetadata import TZ
from WbcUtility import parse_url

LOGGER = logging.getLogger( 'WbcAllInOne' )

#----- WBC All-in-One Schedule -----------------------------------------------

class WbcAllInOne( object ):
    """
    This class is used to parse the published All-in-One Schedule, and produce
    a list of tourney events that can be used to compare against the calendars
    generated by the WbcSchedule class.

    The comparer is really just a sanity check, because there is less
    information present in the All-in-One Schedule than is needed to build a
    correct calendar entry.  On the other hand, it's easier to parse than the
    YearBook pages for each event.

    A typical row on the All-in-One schedule might look something like this:

        <tr><td>
        <i><FONT SIZE=+2>RBS</FONT></i>
        </td><td align=right valign=top bgcolor="#FFFF00">
        <FONT COLOR="#000000"><i>Russian Beseiged</i>
        </FONT>
        </td><td>
        </td><td>
        &nbsp</td><td>
        &nbsp</td><td>
        &nbsp</td><td>
        &nbsp</td><td>
        We<FONT COLOR=green>17</FONT>,<FONT COLOR=magenta>19</FONT><br>
        <FONT SIZE=-1>17:Pt; 19:Lampeter</FONT>
        </td><td>
        Th<FONT COLOR=red>9</FONT>,<FONT COLOR=red>14</FONT>,<FONT COLOR=blue>19</FONT><br>
        <FONT SIZE=-1>Lampeter</FONT>
        </td><td>
        Fr<FONT COLOR=#AAAA00>9</FONT><br>
        <FONT SIZE=-1>Lampeter</FONT>
        </td><td>
        &nbsp</td><td>
        &nbsp</tr>

    This is, frankly, horrible HTML.  But at least it's consistent, year-to-year,
    and BeautifulSoup can parse it.
    """

    SITE_URL = 'http://boardgamers.org/wbc%d/allin1.htm'

    valid = False

    TERRACE = 'Pt'

    colormap = {
        'green': 'Demo',
        'magenta': 'Mulligan',
        'red': 'Round',
        '#07BED2': 'QF',
        'blue': 'SF',
        '#AAAA00': 'F',
    }

    # Events that are miscoded (bad code : actual code)
    # codemap = { 'MMA': 'MRA', }
    codemap = { }

    events = {}

    class Event( object ):
        """Simple data object to collect information about an event occuring at a specific time."""

        def __init__( self ):
            self.code = None
            self.name = None
            self.type = None
            self.time = None
            self.location = None

        def __cmp__( self, other ):
            return cmp( self.time, other.time )

        def __str__( self ):
            return '%s %s %s in %s at %s' % ( self.code, self.name, self.type, self.location, self.time )

    def __init__( self, metadata, options ):
        self.meta = metadata
        self.options = options
        self.page = None

        self.load_table()

    def load_table( self ):
        """Parse the All-in-One schedule (HTML)"""

        LOGGER.info( 'Parsing WBC All-in-One schedule' )

        self.page = parse_url( self.SITE_URL % ( self.meta.this_year % 100 ) )
        if not self.page:
            return

        try:
            title = self.page.findAll( 'title' )[0]
            year = str( title.text )
            year = year.strip().split()
            year = int( year[0] )
        except:
            # Fetch from page body instead of page title.
            # html.body.table.tr.td.p.font.b.font.NavigableString
            try:
                td = self.page.html.body.table.tr.td
                text = td.h1.b.text
                year = str( text ).strip().split()
                year = int( year[0] )
            except:
                year = 2013

        if year != self.meta.this_year and year != self.options.year:
            LOGGER.error( "All-in-one schedule for %d is out of date", year )

            return

        tables = self.page.findAll( 'table' )
        rows = tables[3].findAll( 'tr' )
        for row in rows:
            self.load_row( row )

        self.valid = True

    def load_row( self, row ):
        """Parse an individual all-in-one row to find times and rooms for an event"""

        events = []

        cells = row.findAll( 'td' )
        code = str( cells[0].font.text ).strip( ';' )
        name = str( cells[1].font.text ).strip( ';* ' )

        code = self.codemap[ code ] if self.codemap.has_key( code ) else code

        current_date = self.meta.first_day

        # For each day ...
        for cell in cells[3:]:
            current = {}

            # All entries belong to font tags
            for f in cell.findAll( 'font' ):
                for key, val in f.attrs.items():
                    if key == 'color':
                        # Fonts with color attributes represent start/type data for a single event
                        e = WbcAllInOne.Event()
                        e.code = code
                        e.name = name
                        hour = int( f.text.strip() )
                        day = current_date.day
                        month = current_date.month
                        if hour >= 24:
                            hour = hour - 24
                            day = day + 1
                        if day >= 32:  # This works because WBC always starts in either the end of July or beginning of August
                            day = day - 31
                            month = month + 1
                        e.time = TZ.localize( current_date.replace( month=month, day=day, hour=hour ) )
                        e.type = self.colormap.get( val, None )
                        current[hour] = e

                    elif key == 'size':
                        # Fonts with size=-1 represent entry data for all events
                        text = str( f.text ).strip().split( '; ' )

                        if len( text ) == 1:
                            # If there's only one entry, it applies to all events
                            for e in current.values():
                                e.location = text[0]
                        else:
                            # For each entry ...
                            for chunk in text:
                                times, dummy, entry = chunk.partition( ':' )
                                if times == 'others':
                                    # Apply this location to all entries without locations
                                    for e in current.values():
                                        if not e.location:
                                            e.location = entry
                                else:
                                    # Apply this location to each listed hour
                                    for hour in times.split( ',' ):
                                        current[int( hour )].location = entry

            # Add all of this days events to the list
            events = events + current.values()

            # Move to the next date
            current_date = current_date + timedelta( days=1 )

        # Sort the list, then add it to the events map
        events.sort()
        self.events[code] = events

